type Cycles = nat;

type RejectCode = variant {
  SysFatal;
  SysTransient;
  DestinationInvalid;
  CanisterReject;
  CanisterError;
  SysUnknown
};

type ProxyArgs = record {
  canister_id : principal;
  method : text;
  args : blob;
  cycles : Cycles
};

type ProxyResult = variant {
  Ok : record {
    result : blob;
    refunded_cycles : Cycles
  };
  Err : variant {
    /// The request was rejected.
    Rejected : record {
      reject_code : RejectCode;
      reject_message : text;
      refunded_cycles : Cycles
    };
    /// The proxy canister does not have enough cycles to process the request.
    InsufficientCycles : record {
      required_cycles : Cycles;
      available_cycles : Cycles
    };
    /// The caller is no authorized to use this proxy.
    /// Only controller can access.
    UnauthorizedUser

  }
};

service : {
  proxy : (ProxyArgs) -> (ProxyResult)
}
